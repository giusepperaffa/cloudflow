# ========================================
# Import Python Modules (Standard Library)
# ========================================
import argparse

# ========================================
# Import Python Modules (Project-specific) 
# ========================================
from sapp.db import DB, DBType
from sapp.pipeline.pysa_taint_parser import Parser as PysaParser
from sapp.ui.interactive import Interactive

# =========
# Functions
# =========
def process_program_input():
    parser_obj = argparse.ArgumentParser(description='Launches the custom postprocessing of the \
        SQLite database generated by the SAPP Tool.')
    parser_obj.add_argument('-d', '--database-path', action='store', type=str, metavar='database', \
        help='Database - Full path of SQLite database to be processed', required=True)
    parser_obj.add_argument('-r', '--repository-path', action='store', type=str, metavar='repository', \
        help='Repository - Full path of code repository to be processed', required=True)
    parser_obj.add_argument('-i', '--issue', action='store', type=int, metavar='issue', \
        help='Issue - Number of the issue identified by Pysa to be processed', required=True)
    return parser_obj.parse_args()
        
# ====
# Main
# ====
if __name__ == '__main__':
    message = '--- SQLite database custom postprocessor ---'
    print(len(message) * '-')
    print(message)
    print(len(message) * '-')
    args = process_program_input()
    print(f'--- Database to be processed: {args.database_path} ---')
    print(f'--- Repository to be processed: {args.repository_path} ---')
    print(f'--- Issue to be processed: {args.issue} ---')
    # Initialize database interface object
    database = DB(DBType.SQLITE, args.database_path, assertions=True)
    # Initialize parser class variable
    parser_class = PysaParser
    # Create instance of the Interactive class
    postprocessor_obj = Interactive(
        database=database,
        repository_directory=args.repository_path,
        parser_class=parser_class
    )
    # Call relevant methods of the Interactive class
    postprocessor_obj.setup()
    postprocessor_obj.issue(args.issue)
    # An issue must be selected (with the issue method) prior to calling the trace method 
    postprocessor_obj.trace()
